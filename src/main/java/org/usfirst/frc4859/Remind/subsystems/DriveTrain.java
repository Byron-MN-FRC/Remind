// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4859.Remind.subsystems;


import org.usfirst.frc4859.Remind.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Joystick;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private PWMVictorSPX rightMaster;
    private PWMVictorSPX rightFollower;
    private SpeedControllerGroup rightGroup;
    private PWMVictorSPX  leftMaster;
    private PWMVictorSPX leftFollower;
    private SpeedControllerGroup leftGroup;
    private DifferentialDrive tankDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double y = 0;
	private double twist = 0;

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightMaster = new PWMVictorSPX(2);
        addChild("rightMaster",rightMaster);
        rightMaster.setInverted(false);
        
        rightFollower = new PWMVictorSPX(3);
        addChild("rightFollower",rightFollower);
        rightFollower.setInverted(false);
        
        rightGroup = new SpeedControllerGroup(rightMaster, rightFollower  );
        addChild("RightGroup",rightGroup);
        
        
         leftMaster = new PWMVictorSPX(0);
        addChild(" leftMaster", leftMaster);
         leftMaster.setInverted(false);
        
        leftFollower = new PWMVictorSPX(1);
        addChild("leftFollower",leftFollower);
        leftFollower.setInverted(false);
        
        leftGroup = new SpeedControllerGroup( leftMaster, leftFollower  );
        addChild("LeftGroup ",leftGroup);
        
        
        tankDrive = new DifferentialDrive(leftGroup, rightGroup);
        addChild("tankDrive",tankDrive);
        tankDrive.setSafetyEnabled(true);
        tankDrive.setExpiration(0.1);
        tankDrive.setMaxOutput(1.0);

        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoystick());

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    double limitedJoystick = 0;

    public void driveWithJoystick(Joystick joystickP0) {
		y = -joystickP0.getY();
        twist = joystickP0.getTwist();
        double change = y - limitedJoystick; 
        if (change > 0.1) {change = 0.1;}
        else if (change < -0.1) {change = -0.1;}
        limitedJoystick += change;
        tankDrive.arcadeDrive(limitedJoystick, twist);
    }

}

